AWSTemplateFormatVersion: "2010-09-09"
Description: "This is my Final project"
Mappings:
  InstanceTypeMappings:
    t2.micro:
      InstanceType: "t2.micro"
      ImageId: "ami-0c101f26f147fa7fd"
    t3.micro:
      InstanceType: "t3.micro"
      ImageId: "ami-0c101f26f147fa7fd"
Parameters:
  OwnerTag:
    Type: String
    Description: value for Owner
    Default: "ayperi"
  VpcCidrBlock:
    Type: String
    Description: CIDR for VPC
    Default: "10.0.0.0/16"
  PublicSubnet1CidrBlock:
    Type: String
    Description: CIDR block for public subnet 1
    Default: "10.0.1.0/24"

  PublicSubnet2CidrBlock:
    Type: String
    Description: CIDR block for public subnet 1
    Default: "10.0.2.0/24"
  PrivateSubnet1CidrBlock:
    Type: String
    Description: CIDR block for private subnet 1
    Default: "10.0.3.0/24"
  PrivateSubnet2CidrBlock:
    Type: String
    Description: CIDR block for private subnet 2
    Default: "10.0.4.0/24"
  InstanceType:
    Type: String
    Default: "t2.micro"
    AllowedValues: 
      - t2.micro
      - t3.micro
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: "my-keypair"
    Description: Key pair for SSH access to the instances    
Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Owner
        Value: !Ref OwnerTag
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PublicSubnet1CidrBlock
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Owner
        Value: !Ref OwnerTag
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PublicSubnet2CidrBlock
      AvailabilityZone: us-east-1b
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Owner
        Value: !Ref OwnerTag
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivateSubnet1CidrBlock
      AvailabilityZone: us-east-1c
      Tags:
      - Key: Owner
        Value: !Ref OwnerTag
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivateSubnet2CidrBlock
      AvailabilityZone: us-east-1d
      Tags:
      - Key: Owner
        Value: !Ref OwnerTag
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Owner
        Value: !Ref OwnerTag
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
      - Key: Owner
        Value: !Ref OwnerTag 
  myRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
       RouteTableId: !Ref RouteTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId: !Ref InternetGateway  
  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGateway1:
    Type:
    

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref RouteTable
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyLoadBalancer
      Scheme: internet-facing
      Type: application
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref SecurityGroup
      IpAddressType: ipv4  
      Tags:
        - Key: Owner
          Value: !Ref OwnerTag   
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the load balancer
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Owner
          Value: !Ref OwnerTag 
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: MyLaunchTemplate
      LaunchTemplateData:
        ImageId: !FindInMap [InstanceTypeMappings, !Ref InstanceType, ImageId]
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref SecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo yum update -y
            sudo yum install -y httpd
            sudo systemctl start httpd
            sudo systemctl enable httpd
            sudo echo "<h1>Welcome to My Apache Web Server $HOSTNAME</h1>" > /var/www/html/index.html
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup    
    Properties:
      Name: MyTargetGroup
      HealthCheckEnabled: 'true'
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      TargetType: instance
      VpcId: !Ref MyVPC
      IpAddressType: ipv4

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate     
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 2
      HealthCheckType: EC2
      VPCZoneIdentifier: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2 
      TargetGroupARNs:
        - !GetAtt TargetGroup.TargetGroupArn         
  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !GetAtt TargetGroup.TargetGroupArn
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

Outputs:
  DNSofELB:
    Description: DNS for my Elastic Load balancer
    Value: !GetAtt LoadBalancer.DNSName      